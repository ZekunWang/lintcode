/*
Given a linked list, remove the nth node from the end of list and return its head.

Example
Given linked list: 1->2->3->4->5->null, and n = 2.

After removing the second node from the end, the linked list becomes 1->2->3->5->null.
Note
The minimum number of nodes in list is n.

Challenge
O(n) time
*/

/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param head: The first node of linked list.
     * @param n: An integer.
     * @return: The head of linked list.
     */
    ListNode removeNthFromEnd(ListNode head, int n) {
        if(head == null || n == 0) return head;
        ListNode nhead = new ListNode(0), slow = nhead, fast = nhead;
        nhead.next = head;
        while(slow.next != null && n-- > 0) slow = slow.next;
        if(n > 0) return head;
        while(slow.next != null){
            slow = slow.next;
            fast = fast.next;
        }
        fast.next = fast.next.next;
        return nhead.next;
    }
}
