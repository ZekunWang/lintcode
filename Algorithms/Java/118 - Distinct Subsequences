/*
Given a string S and a string T, count the number of distinct subsequences of T in S.

A subsequence of a string is a new string which is formed from the original string by 
deleting some (can be none) of the characters without disturbing the relative positions 
of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

Example
Given S = "rabbbit", T = "rabbit", return 3.

Challenge
Do it in O(n2) time and O(n) memory.
O(n2) memory is also acceptable if you do not know how to optimize memory.
*/

public class Solution {
    /**
     * @param S, T: Two string.
     * @return: Count the number of distinct subsequences
     */
    public int numDistinct(String S, String T) {
        //return solution1(S, T);
        return solution2(S, T);
    }
    public int solution1(String S, String T){
        if(S == null || T == null) return Integer.MAX_VALUE;
        int row = T.length(), col = S.length();
        int[][] cnt = new int[row+1][col+1];
        for(int j = 0; j <= col; j++) cnt[0][j] = 1;
        for(int i = 1; i <= row; i++){
            for(int j = 1; j <= col; j++){
                cnt[i][j] = cnt[i][j-1] + (T.charAt(i-1) == S.charAt(j-1) ? cnt[i-1][j-1] : 0);
            }
        }
        return cnt[row][col];
    }
    public int solution2(String S, String T){
        if(S == null || T == null) return Integer.MAX_VALUE;
        int row = T.length(), col = S.length();
        int[] cnt = new int[col+1];
        for(int j = 0; j <= col; j++) cnt[j] = 1;
        for(int i = 1; i <= row; i++){
            int nxt = 0, cur = cnt[0];
            cnt[0] = 0;
            for(int j = 1; j <= col; j++){
                nxt = cnt[j];
                cnt[j] = cnt[j-1] + (T.charAt(i-1) == S.charAt(j-1) ? cur : 0);
                cur = nxt;
            }
        }
        return cnt[col];
    }
}
