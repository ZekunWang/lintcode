/*
Given a (decimal - e.g. 3.72) number that is passed in as a string, return the binary representation 
that is passed in as a string. If the fractional part of the number can not be represented accurately 
in binary with at most 32 characters, return ERROR.

Example
For n = "3.72", return "ERROR".
For n = "3.5", return "11.1".
*/

public class Solution {
    /**
     *@param n: Given a decimal number that is passed in as a string
     *@return: A string
     */
    public String binaryRepresentation(String n) {
        if(n == null) return null;
        if(n.equals("")) return "";
        int idx = n.indexOf('.');
        if(idx != -1 && Double.parseDouble(n.substring(idx + 1)) % 5 != 0) return "ERROR";
        double t = Double.parseDouble(n);
        long i = (long)t;
        double d = t - i;
        String res = getDecimal(d);
        if(res.equals("ERROR")) return res;
        if(res.length() > 0) res = "." + res;
        return getInteger(i) + res;
    }
    public String getDecimal(double d){
        if(d == 0.0) return "";
        StringBuilder sb = new StringBuilder();
        while(d > 0){
            d *= 2;
            char dig = d >= 1 ? '1' : '0';
            sb.append(dig);
            d -= dig - '0';
            if(sb.length() > 32) return "ERROR";
        }
        return sb.toString();
    }
    public String getInteger(long d){
        if(d == 0) return "0";
        String s = "";
        while(d != 0){
            int dig = (int)(d  & 1L);
            s = "" + dig + s;
            d >>= 1;
        }
        return s;
    }
}
