/*
Given a set of distinct integers, return all possible subsets.

Example
If S = [1,2,3], a solution is:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
Note
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
Challenge
Can you do it in both recursively and iteratively?
*/

import java.util.*;

class Solution {
    /**
     * @param S: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    private ArrayList<ArrayList<Integer>> al;
    public ArrayList<ArrayList<Integer>> subsets(int[] nums) {
        al = new ArrayList<ArrayList<Integer>>();
        al.add(new ArrayList<Integer>());
        if(nums.length == 0) return al;
        Arrays.sort(nums);
        for(int cur : nums){
            for(int i = 0, sz = al.size(); i < sz; i++){
                ArrayList<Integer> t = new ArrayList<Integer>(al.get(i));
                t.add(cur);
                al.add(t);
            }
        }
        return al;
    }
}
