/*
Given a list of numbers with duplicate number in it. Find all unique permutations.

Example
For numbers [1,2,2] the unique permutations are:
[
  [1,2,2],
  [2,1,2],
  [2,2,1]
]
Challenge
Using recursion to do it is acceptable. If you can do it without recursion, that would be great!
*/

import java.util.*;

class Solution {
    /**
     * @param nums: A list of integers.
     * @return: A list of unique permutations.
     */
    private ArrayList<ArrayList<Integer>> al;
    public ArrayList<ArrayList<Integer>> permuteUnique(ArrayList<Integer> nums) {
        al = new ArrayList<ArrayList<Integer>>();
        if(nums.size() == 0) return al;
        solution1(nums);
        return al;
    }
    public void solution1(ArrayList<Integer> nums){
        HashSet<Integer> hs = new HashSet<Integer>();
        ArrayList<Integer> tmp = new ArrayList<Integer>();
        tmp.add(nums.get(0));
        hs.add(nums.get(0));
        al.add(tmp);
        int sz = 1;
        for(int i = 1; i < nums.size(); i++){
            int nm = nums.get(i);
            for(int j = 0, szt = sz; j < szt; j++){
                ArrayList<Integer> cur = al.get(j);
                cur.add(nm);
                for(int k = 0, p = cur.size() - 1; k < p; k++){
                    if(cur.get(k) == nm) continue;
                    cur.set(p, cur.get(k));
                    cur.set(k, nm);
                    if(hs.contains(nm)){
                        int l = szt;
                        while(l < sz && !compare(cur, al.get(l))) l++;
                        if(l == sz){
                            al.add(new ArrayList(cur));
                            sz++;
                        }
                    }else{
                        al.add(new ArrayList(cur));
                        hs.add(nm);
                        sz++;
                    }
                    cur.set(k, cur.get(p));
                    cur.set(p, nm);
                }
            }
        }
    }
    public boolean compare(ArrayList<Integer> a, ArrayList<Integer> b){
        for(int i = 0; i < a.size(); i++)
            if(a.get(i) != b.get(i)) return false;
        return true;
    }
}
