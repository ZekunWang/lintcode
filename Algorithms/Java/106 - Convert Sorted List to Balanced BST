/*
Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

Example
               2
1->2->3  =>   / \
             1   3
*/

/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */ 
 
import java.util.HashMap;

public class Solution {
    /**
     * @param head: The first node of linked list.
     * @return: a tree node
     */
    public TreeNode sortedListToBST(ListNode head) {
        if(head == null) return null;
        HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();
        //LinkedList<Integer> list = new LinkedList<Integer>();
        ListNode tmp = head;
        int idx = 0;
        while(tmp != null){
            hm.put(idx++, tmp.val);
            //list.add(tmp.val);
            tmp = tmp.next;
        }
        return solution1(hm, 0, hm.size() - 1);
        //return solution2(list, 0, list.size() - 1);
    }
    public TreeNode solution1(HashMap<Integer,Integer> hm, int lo, int hi){
        if(lo > hi) return null;
        if(lo == hi) return new TreeNode(hm.get(lo));
        int mid = (lo + hi) / 2;
        TreeNode node = new TreeNode(hm.get(mid));
        node.left = solution1(hm, lo, mid - 1);
        node.right = solution1(hm, mid + 1, hi);
        return node;
    }
    public TreeNode solution2(LinkedList<Integer> hm, int lo, int hi){
        if(lo > hi) return null;
        if(lo == hi) return new TreeNode(hm.get(lo));
        int mid = (lo + hi) / 2;
        TreeNode node = new TreeNode(hm.get(mid));
        node.left = solution2(hm, lo, mid - 1);
        node.right = solution2(hm, mid + 1, hi);
        return node;
    }
}
