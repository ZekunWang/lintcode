/*
Given an array of integers, find a contiguous subarray which has the largest sum.

Example
Given the array [−2,2,−3,4,−1,2,1,−5,3], the contiguous subarray [4,−1,2,1] has the largest sum = 6.

Note
The subarray should contain at least one number.

Challenge
Can you do it in time complexity O(n)?
*/

public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A integer indicate the sum of max subarray
     */
    public int maxSubArray(int[] nums) {
        return solution1(nums);
        //return solution2(nums);
    }
    public int solution1(int[] nums){
        if(nums == null) return Integer.MIN_VALUE;
        int sz = nums.length;
        if(sz == 0) return Integer.MIN_VALUE;
        int[] cnt = new int[sz];
        cnt[0] = nums[0];
        int sum = nums[0];
        for(int i = 1; i < sz; i++){
            cnt[i] = nums[i] + Math.max(cnt[i-1], 0);
            sum = Math.max(sum, cnt[i]);
        }
        return sum;
    }
    public int solution2(int[] nums){
        if(nums == null) return Integer.MIN_VALUE;
        int sz = nums.length;
        if(sz == 0) return Integer.MIN_VALUE;
        int sum = nums[0], cur = sum;
        for(int i = 1; i < sz; i++){
            cur = nums[i] + Math.max(cur, 0);
            sum = Math.max(sum, cur);
        }
        return sum;
    }
}
