/*
Given preorder and inorder traversal of a tree, construct the binary tree.

Example
Given in-order [1,2,3] and pre-order [2,1,3], return a tree:

  2
 / \
1   3
Note
You may assume that duplicates do not exist in the tree.
*/

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
 
 /**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
 
 
public class Solution {
    /**
     *@param preorder : A list of integers that preorder traversal of a tree
     *@param inorder : A list of integers that inorder traversal of a tree
     *@return : Root of a tree
     */
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder.length != inorder.length || preorder.length == 0) return null;
        return build(preorder, 0, preorder.length - 1, inorder, 0, inorder.length);
    }
    public TreeNode build(int[] p, int lop, int hip, int[] i, int loi, int hii){
        if(lop > hip) return null;
        if(lop == hip) return new TreeNode(p[lop]);
        int val = p[lop], pos = loi;
        TreeNode node = new TreeNode(val);
        while(i[pos] != val) pos++;
        int cnt = pos - loi;
        node.left = build(p, lop + 1, lop + cnt, i, loi, pos - 1);
        node.right = build(p, lop + cnt + 1, hip, i, pos + 1, hii);
        return node;
    }
}
