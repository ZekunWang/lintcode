/*
The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle.
Each solution contains a distinct board configuration of the n-queens' placement, 
where 'Q' and '.' both indicate a queen and an empty space respectively.

Example
There exist two distinct solutions to the 4-queens puzzle:
[
  // Solution 1
  [".Q..",
   "...Q",
   "Q...",
   "..Q."
  ],
  // Solution 2
  ["..Q.",
   "Q...",
   "...Q",
   ".Q.."
  ]
]
Challenge
Can you do it without recursion?
*/

import java.util.ArrayList;

class Solution {
    /**
     * Get all distinct N-Queen solutions
     * @param n: The number of queens
     * @return: All distinct solutions
     * For example, A string '...Q' shows a queen on forth position
     */
    private ArrayList<ArrayList<String>> al;
    private StringBuilder[] sb;
    ArrayList<ArrayList<String>> solveNQueens(int n) {
        al = new ArrayList<ArrayList<String>>();
        if(n < 1) return al;
        sb = new StringBuilder[n];
        char[] init = new char[n];
        sb[0] = new StringBuilder();
        for(int i = 0; i < n; i++) sb[0].append('.');
        for(int i = 1; i < n; i++) sb[i] = new StringBuilder(sb[0]);
        solution1(0, n);
        return al;
    }
    public void solution1(int row, int n){
        if(row == n){
            ArrayList<String> tmp = new ArrayList<String>();
            for(StringBuilder i : sb) tmp.add(i.toString());
            al.add(tmp);
            return;
        }
        for(int i = 0; i < n; i++){
            sb[row].setCharAt(i, 'Q');
            if(checkQ(row, i)) solution1(row + 1, n);
            sb[row].setCharAt(i, '.');
        }
    }
    public boolean checkQ(int r, int c){
        for(int i = 0; i < r; i++){
            int j = 0;
            while(sb[i].charAt(j) != 'Q') j++;
            if(j == c) return false;
            int diff = Math.abs(j - c);
            if(diff == r - i) return false;
        }
        return true;
    }
};
