/*
Sort a linked list in O(n log n) time using constant space complexity.

Example
Given 1-3->2->null, sort it to 1->2->3->null.
*/

/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param head: The head of linked list.
     * @return: You should return the head of the sorted linked list,
                    using constant space complexity.
     */
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null) return head;
        ListNode tmp = head;
        int cnt = 0;
        while(tmp.next != null){
            cnt++;
            tmp = tmp.next;
        }
        return sort(head, 0, cnt);
    }
    public ListNode sort(ListNode head, int lo, int hi){
        if(lo == hi) return head;
        int mid = (lo + hi) / 2, cnt = mid;
        ListNode midNode = head;
        while(cnt-- > lo) midNode = midNode.next;
        ListNode right = sort(midNode.next, mid + 1, hi);
        midNode.next = null;
        ListNode left = sort(head, lo, mid);
        return merge(left, right);
    }
    public ListNode merge(ListNode left, ListNode right){
        ListNode head = new ListNode(0), cur = head;
        while(left != null && right != null){
            if(left.val >= right.val){
                cur.next = right;
                right = right.next;
            }else{
                cur.next = left;
                left = left.next;
            }
            cur = cur.next;
        }
        if(left != null) cur.next = left;
        else if(right != null) cur.next = right;
        return head.next;
    }
}
