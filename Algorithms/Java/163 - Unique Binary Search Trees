/*
Given n, how many structurally unique BSTs (binary search trees) that store values 1...n?

Example
Given n = 3, there are a total of 5 unique BST's.

1           3    3       2      1
 \         /    /       / \      \
  3      2     1       1   3      2
 /      /       \                  \
2     1          2                  3
*/

import java.util.HashMap;

public class Solution {
    /**
     * @paramn n: An integer
     * @return: An integer
     */
    public int numTrees(int n) {
        HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();
        hm.put(0, 1);
        hm.put(1, 1);
        for(int i = 2; i <= n; i++){
            int sum = 0, j = 0;
            for(; j < i / 2; j++)
                sum += hm.get(j) * hm.get(i - j - 1);
            sum *= 2;
            if(i % 2 == 1) sum += hm.get(j) * hm.get(i - j - 1);
            hm.put(i, sum);
        }
        return hm.get(n);
    }
}
