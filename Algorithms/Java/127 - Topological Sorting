/*
Given an directed graph, a topological order of the graph nodes is defined as follow:

For each directed edge A -> B in graph, A must before B in the order list.
The first node in the order can be any node in the graph with no nodes direct to it.
Find any topological order for the given graph.

Example
For graph as follow:
[0->1, 0->2, 0->3, 1->4, 2->4, 2->5, 3->4, 3->5]

The topological order can be:
[0, 1, 2, 3, 4, 5]
[0, 2, 3, 1, 5, 4]
...
Note
You can assume that there is at least one topological order in the graph.

Challenge
Can you do it in both BFS and DFS?
*/

/**
 * Definition for Directed graph.
 * class DirectedGraphNode {
 *     int label;
 *     ArrayList<DirectedGraphNode> neighbors;
 *     DirectedGraphNode(int x) { label = x; neighbors = new ArrayList<DirectedGraphNode>(); }
 * };
 */
import java.util.*;

public class Solution {
    /**
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */    
    ArrayList<DirectedGraphNode> al;
    HashSet<DirectedGraphNode> hs;
    HashMap<DirectedGraphNode,Boolean> hm;
    Stack<DirectedGraphNode> st;
    public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {
        al = new ArrayList<DirectedGraphNode>();
        if(graph == null || graph.size() == 0) return al;
        solution1(graph);
        return al;
    }
    public void solution1(ArrayList<DirectedGraphNode> graph){
        hs = new HashSet<DirectedGraphNode>();
        st = new Stack<DirectedGraphNode>();
        for(DirectedGraphNode cur : graph){
            if(!hs.contains(cur)){ // not marked
                hs.add(cur); // mark
                DFS(cur); // search node
            }
        }
        while(!st.empty()) al.add(st.pop());
    }
    public void DFS(DirectedGraphNode cur){
        ArrayList<DirectedGraphNode> nb = cur.neighbors;
        for(DirectedGraphNode tmp : nb){
            if(!hs.contains(tmp)){
                hs.add(tmp);
                DFS(tmp);
            }
        }
        st.push(cur); // finished node
    }
}
