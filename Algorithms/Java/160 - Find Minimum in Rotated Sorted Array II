/*
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.
The array may contain duplicates.

Example
Given [4,4,5,6,7,0,1,2] return 0
*/

public class Solution {
    /**
     * @param num: a rotated sorted array
     * @return: the minimum number in the array
     */
    public int findMin(int[] num) {
        if(num == null) return Integer.MAX_VALUE;
        int l = 0, r = num.length - 1, m = 0;
        while(l < r - 1){
            m = l + (r - l) / 2;
            if(num[m] > num[r]) l = m;
            else if(num[m] < num[r]) r = m;
            else r--;
        }
        return Math.min(num[l], num[r]);
    }
}
