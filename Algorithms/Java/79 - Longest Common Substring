/*
Given two strings, find the longest common substring.
Return the length of it.

Example
Given A = "ABCD", B = "CBCE", return 2.
Note
The characters in substring should occur continuously in original string. This is different with subsequence.

Challenge
O(n x m) time and memory.
*/

import java.util.*;

public class Solution {
    /**
     * @param A, B: Two string.
     * @return: the length of the longest common substring.
     */
    private HashMap<Character, LinkedList<Integer> > hm;
    public int longestCommonSubstring(String A, String B) {
        if(A == null || B == null || A.length() == 0 || B.length() == 0)
            return 0;
        int res = 0;
        hm = new HashMap<Character, LinkedList<Integer> >();
        for(int i = 0; i < A.length(); i++){
            char k = A.charAt(i);
            if(hm.containsKey(k) == false)
                hm.put(k, new LinkedList<Integer>());
            hm.get(k).add(i);
        }
        for(int i = 0; i < B.length(); i++){
            LinkedList<Integer> v = hm.get(B.charAt(i));
            if(v == null) continue;
            for(int j = 0; j < v.size(); j++){
                int tB = i, tA = v.get(j);
                for(; tA < A.length() && tB < B.length(); tA++, tB++)
                    if(A.charAt(tA) != B.charAt(tB)) break;
                res = Math.max(res, tB - i);
            }
        }
        return res;
    }
}
