/*
Given three strings: s1, s2, s3, determine whether s3 is formed by the interleaving of s1 and s2.

Example
For s1 = "aabcc", s2 = "dbbca"

When s3 = "aadbbcbcac", return true.
When s3 = "aadbbbaccc", return false.
Challenge
O(n2) time or better
*/

public class Solution {
    /**
     * Determine whether s3 is formed by interleaving of s1 and s2.
     * @param s1, s2, s3: As description.
     * @return: true or false.
     */
    public boolean isInterleave(String s1, String s2, String s3) {
        if(s3 == null) return false;
        if(s1 == null && s2 == null) return false;
        if(s1 == null || s1.length() == 0) return s2.equals(s3);
        if(s2 == null || s2.length() == 0) return s1.equals(s3);
        //return solution1(s1, s2, s3);     //DP 2-D array
        return solution2(s1, s2, s3);       //DP 1-D array
        //return solution3(s1, s2, s3);     //recursion
    }
    public boolean solution1(String s1, String s2, String s3){  // dp with 2-D array
        int row = s1.length(), col = s2.length(), sz3 = s3.length();
        if(row + col != sz3) return false;
        boolean[][] chk = new boolean[row+1][col+1];
        chk[0][0] = true;
        for(int j = 1; j <= col; j++){
            if(s3.charAt(j-1) == s2.charAt(j-1) && chk[0][j-1])
                chk[0][j] = true;
        }
        for(int i = 1; i <= row; i++){
            if(s3.charAt(i-1) == s1.charAt(i-1) && chk[i-1][0])
                chk[i][0] = true;
        }
        for(int i = 1; i <= row; i++){
            for(int j = 1; j <= col; j++){
                char ch = s3.charAt(i+j-1);
                if((ch == s1.charAt(i-1) && chk[i-1][j]) ||
                    (ch == s2.charAt(j-1) && chk[i][j-1]))
                    chk[i][j] = true;
            }
        }
        return chk[row][col];
    }
    public boolean solution2(String s1, String s2, String s3){  // dp with 2-D array
        int row = s1.length(), col = s2.length(), sz3 = s3.length();
        if(row + col != sz3) return false;
        boolean[] chk = new boolean[col+1];
        chk[0] = true;
        for(int j = 1; j <= col; j++){
            if(s3.charAt(j-1) == s2.charAt(j-1) && chk[j-1])
                chk[j] = true;
        }
        for(int i = 1; i <= row; i++){
            if(s3.charAt(i-1) == s1.charAt(i-1) && chk[0]) chk[0] = true;
            else chk[0] = false;
            for(int j = 1; j <= col; j++){
                char ch = s3.charAt(i+j-1);
                if((ch == s1.charAt(i-1) && chk[j]) ||
                    (ch == s2.charAt(j-1) && chk[j-1]))
                    chk[j] = true;
                else chk[j] = false;
            }
        }
        return chk[col];
    }
    public boolean solution3(String s1, String s2, String s3){  // recursion
        int l1 = 0, l2 = 0, l3 = 0;
        int sz1 = s1.length(), sz2 = s2.length(), sz3 = s3.length();
        while(l1 < sz1 && l2 < sz2 && l3 < sz3){
            char ch1 = s1.charAt(l1), ch2 = s2.charAt(l2), ch3 = s3.charAt(l3);
            if(ch3 == ch1 && ch3 == ch2) 
                return solution2(s1.substring(l1), s2.substring(l2+1), s3.substring(l3+1))
                    || solution2(s1.substring(l1+1), s2.substring(l2), s3.substring(l3+1));
            else if(ch3 == ch1) l1++;
            else if(ch3 == ch2) l2++;
            else return false;
            l3++;
        }
        while(l1 < sz1 && l3 < sz3){
            if(s1.charAt(l1++) != s3.charAt(l3++)) return false;
        }
        while(l2 < sz2 && l3 < sz3){
            if(s2.charAt(l2++) != s3.charAt(l3++)) return false;
        }
        return (l1 == sz1 && l2 == sz2 && l3 == sz3) ? true : false;
    }
}
