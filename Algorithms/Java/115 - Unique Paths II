/*
Follow up for "Unique Paths":
Now consider if some obstacles are added to the grids. How many unique paths would there be?
An obstacle and empty space is marked as 1 and 0 respectively in the grid.

Example
For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

Note
m and n will be at most 100.
*/

public class Solution {
    /**
     * @param obstacleGrid: A list of lists of integers
     * @return: An integer
     */
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        //return solution1(obstacleGrid);
        return solution2(obstacleGrid);
    }
    public int solution1(int[][] grid){   //  DP with 2-D array
        if(grid == null) return 0;
        int row = grid.length;
        if(row == 0) return 0;
        int col = grid[0].length;
        if(col == 0) return 0;
        int[][] cnt = new int[row][col];
        if(grid[0][0] == 1) return 0;
        for(int i = 0; i < row && grid[i][0] == 0; i++) cnt[i][0] = 1;
        for(int j = 1; j < col && grid[0][j] == 0; j++) cnt[0][j] = 1;
        for(int i = 1; i < row; i++){
            for(int j = 1; j < col; j++){
                if(grid[i][j] == 0) cnt[i][j] = cnt[i-1][j] + cnt[i][j-1];
            }
        }
        return cnt[row-1][col-1];
    }
    public int solution2(int[][] grid){   // optimized DP with 1-D array
        if(grid == null) return 0;
        int row = grid.length;
        if(row == 0) return 0;
        int col = grid[0].length;
        if(col == 0) return 0;
        if(grid[0][0] == 1) return 0;
        int[] cnt = new int[col];
        for(int j = 0; j < col && grid[0][j] == 0; j++) cnt[j] = 1;
        for(int i = 1; i < row; i++){
            if(grid[i][0] == 1) cnt[0] = 0;
            for(int j = 1; j < col; j++){
                if(grid[i][j] == 0) cnt[j] = cnt[j] + cnt[j-1];
                else cnt[j] = 0;
            }
        }
        return cnt[col-1];
    }
}
