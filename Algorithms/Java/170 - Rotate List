/*
Given a list, rotate the list to the right by k places, where k is non-negative.

Example
Given 1->2->3->4->5 and k = 2, return 4->5->1->2->3.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param head: the List
     * @param k: rotate to the right k places
     * @return: the list after rotation
     */
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null || head.next == null || k == 0) return head;
        ListNode cur = head, nxt = head;
        int cnt = 1;
        while(cur.next != null){
            cnt++;
            cur = cur.next;
        }
        k = k % cnt;
        if(k == 0) return head;
        k = cnt - k;
        while(--k > 0) nxt = nxt.next;
        cur.next = head;
        head = nxt.next;
        nxt.next = null;
        return head;
    }
}
