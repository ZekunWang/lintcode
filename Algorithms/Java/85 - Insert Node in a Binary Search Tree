/*
Given a binary search tree and a new tree node, insert the node into the tree. 
You should keep the tree still be a valid binary search tree.

Example
Given binary search tree as follow, after Insert node 6, the tree should be:

  2             2
 / \           / \
1   4   -->   1   4
   /             / \ 
  3             3   6
Challenge
Can you do it without recursion?
*/

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root: The root of the binary search tree.
     * @param node: insert this node into the binary search tree
     * @return: The root of the new binary search tree.
     */
    public TreeNode insertNode(TreeNode root, TreeNode node) {
        if(node == null) return root;
        //return solution1(root, node);
        return solution2(root, node);
    }
    public TreeNode solution1(TreeNode root, TreeNode node){ //recursion
        if(root == null) return node;
        if(node.val < root.val) root.left = solution1(root.left, node);
        else root.right = solution1(root.right, node);
        return root;
    }
    public TreeNode solution2(TreeNode root, TreeNode node){ //iteration
        if(root == null) return node;
        TreeNode cur = root;
        while(cur != null){
            if(node.val < cur.val){
                if(cur.left == null){
                    cur.left = node;
                    break;
                }else cur = cur.left;
            }else{
                if(cur.right == null){
                    cur.right = node;
                    break;
                }else cur = cur.right;
            }
        }
        return root;
    }
}
