/*
Suppose a sorted array is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.

Example
For [4, 5, 1, 2, 3] and target=1, return 2.
For [4, 5, 1, 2, 3] and target=0, return -1.

Challenge
O(logN) time
*/

public class Solution {
    /** 
     *@param A : an integer rotated sorted array
     *@param target :  an integer to be searched
     *return : an integer
     */
    public int search(int[] A, int target) {
        if(A == null) return -1;
        return bSearch(A, 0, A.length - 1, target);
    }
    public int bSearch(int[] v, int lo, int hi, int tg){
        if(lo > hi) return -1;
        int mid = (lo + hi) / 2;
        if(v[mid] == tg) return mid;
        else if(v[mid] < tg){
            if(v[mid] < v[hi] && tg > v[hi]) return bSearch(v, lo, mid - 1, tg);
            return bSearch(v, mid + 1, hi, tg);
        }else{
            if(v[mid] > v[lo] && tg < v[lo]) return bSearch(v, mid + 1, hi, tg);
            return bSearch(v, lo, mid - 1, tg);
        }
    }
}
