/*
Given two values k1 and k2 (where k1 < k2) and a root pointer to a Binary Search Tree. 
Find all the keys of tree in range k1 to k2. i.e. print all x such that k1<=x<=k2 and x is a key of given BST. 
Return all the keys in ascending order.

Example
If k1 = 10 and k2 = 22, then your function should return [12, 20, 22].
    20
   /  \
  8   22
 / \
4   12
*/

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

import java.util.ArrayList;

public class Solution {
    /**
     * @param root: The root of the binary search tree.
     * @param k1 and k2: range k1 to k2.
     * @return: Return all keys that k1<=key<=k2 in ascending order.
     */
    private ArrayList<Integer> al;
    public ArrayList<Integer> searchRange(TreeNode root, int k1, int k2) {
        al = new ArrayList<Integer>();
        if(k1 > k2) return al;
        search(root, k1, k2);
        return al;
    }
    public void search(TreeNode root, int k1, int k2){
        if(root == null) return;
        int val = root.val;
        if(k1 < val) search(root.left, k1, k2);
        if(k1 <= val && val <= k2) al.add(val);
        if(val < k2) search(root.right, k1, k2);
    }
}
