/*
Given a list of numbers, return all possible permutations.

Example
For nums = [1,2,3], the permutations are:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
Challenge
Do it without recursion.
*/

import java.util.ArrayList;

class Solution {
    /**
     * @param nums: A list of integers.
     * @return: A list of permutations.
     */
    private ArrayList<ArrayList<Integer>> al;
    public ArrayList<ArrayList<Integer>> permute(ArrayList<Integer> nums) {
        al = new ArrayList<ArrayList<Integer>>();
        if(nums == null || nums.size() == 0) return al;
        solution1(nums);
        return al;
    }
    public void solution1(ArrayList<Integer> nums){
        ArrayList<Integer> tmp = new ArrayList<Integer>();
        tmp.add(nums.get(0));
        al.add(tmp);
        for(int i = 1; i < nums.size(); i++){   // get each new num
            int nm = nums.get(i);
            for(int j = 0, sz = al.size(); j < sz; j++){ // add to each vector
                ArrayList<Integer> cur = al.get(j);
                cur.add(nm);
                for(int k = 0, p = cur.size() - 1; k < p; k++){
                    ArrayList<Integer> nxt = new ArrayList<Integer>(cur);
                    nxt.set(p, nxt.get(k));
                    nxt.set(k, nm);
                    al.add(nxt);
                }
            }
        }
    }
}
