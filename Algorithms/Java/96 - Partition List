/*
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2->null and x = 3,
return 1->2->2->4->3->5->null.
*/

/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param head: The first node of linked list.
     * @param x: an integer
     * @return: a ListNode 
     */
    public ListNode partition(ListNode head, int x) {
        if(head == null || head.next == null) return head;
        ListNode n1 = new ListNode(0), n2 = new ListNode(0), pre = n1, cur = n2;
        n2.next = head;
        while(cur.next != null){
            if(cur.next.val < x){
                ListNode tmp = cur.next;
                cur.next = tmp.next;
                pre.next = tmp;
                pre = tmp;
            }else cur = cur.next;
        }
        pre.next = n2.next;
        return n1.next;
    }
}
