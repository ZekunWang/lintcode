/*
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? 
Find all unique triplets in the array which gives the sum of zero.

Example
For example, given array S = {-1 0 1 2 -1 -4}, A solution set is:

(-1, 0, 1)
(-1, -1, 2)
Note
Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)

The solution set must not contain duplicate triplets.
*/

import java.util.Arrays;

public class Solution {
    /**
     * @param numbers : Give an array numbers of n integer
     * @return : Find all unique triplets in the array which gives the sum of zero.
     */
    public ArrayList<ArrayList<Integer>> threeSum(int[] numbers) {
        if(numbers == null) return null;
        ArrayList<ArrayList<Integer>> al = new ArrayList<ArrayList<Integer>>();
        if(numbers.length < 3) return al;
        Arrays.sort(numbers);
        for(int i = 0; i < numbers.length - 2; i++){
            int j = i + 1, k = numbers.length - 1, tg = -numbers[i];
            while(j < k){
                int tmp = numbers[j] + numbers[k];
                if(tmp < tg) j++;
                else if(tmp > tg) k--;
                else{
                    ArrayList<Integer> t = new ArrayList<Integer>();
                    t.add(numbers[i]);
                    t.add(numbers[j++]);
                    t.add(numbers[k--]);
                    al.add(t);
                    //al.add(new ArrayList<Integer>(ArrayList.asList(numbers[i],numbers[j],numbers[k])));
                    while(j < k && numbers[k] == numbers[k + 1]) k--;
                    while(j < k && numbers[j] == numbers[j - 1]) j++;
                }
            }
            while(i < numbers.length - 2 && numbers[i + 1] == numbers[i]) i++;
        }
        return al;
    }
}
