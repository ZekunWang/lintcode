/*
Merge two sorted (ascending) linked lists and return it as a new sorted list. The new sorted list 
should be made by splicing together the nodes of the two lists and sorted in ascending order.

Example
Given 1->3->8->11->15->null, 2->null , return 1->2->3->8->11->15->null.
*/

/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param ListNode l1 is the head of the linked list
     * @param ListNode l2 is the head of the linked list
     * @return: ListNode head of linked list
     */
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null && l2 == null) return null;
        if(l1 == null) return l2;
        if(l2 == null) return l1;
        //return solution1(l1, l2);
        return solution2(l1, l2);
    }
    public ListNode solution1(ListNode l1, ListNode l2) {
        ListNode n = new ListNode(0), t = n;
        while(l1 != null && l2 != null){
            if(l1.val < l2.val){
                t.next = l1;
                l1 = l1.next;
            }else{
                t.next = l2;
                l2 = l2.next;
            }
            t = t.next;
        }
        if(l1 != null) t.next = l1;
        else if(l2 != null) t.next = l2;
        return n.next;
    }
    public ListNode solution2(ListNode l1, ListNode l2) {
        ListNode n = new ListNode(0);
        n.next = l1;
        l1 = n;
        while(l1.next != null && l2 != null){
            if(l1.next.val > l2.val){
                ListNode tmp = l2;
                l2 = l2.next;
                tmp.next = l1.next;;
                l1.next = tmp;
            }
            l1 = l1.next;
        }
        if(l2 != null) l1.next = l2;
        return n.next;
    }
}
