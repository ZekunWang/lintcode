/*
Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. 
Return the sum of the three integers.

Example
For example, given array S = {-1 2 1 -4}, and target = 1. The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

Note
You may assume that each input would have exactly one solution.

Challenge
O(n^2) time, O(1) extra space
*/

import java.util.Arrays;

public class Solution {
    /**
     * @param numbers: Give an array numbers of n integer
     * @param target : An integer
     * @return : return the sum of the three integers, the sum closest target.
     */
    public int threeSumClosest(int[] numbers ,int target) {
        if(numbers == null || numbers.length < 3) return -1;
        Arrays.sort(numbers);
        int diff = Integer.MAX_VALUE, res = 0;
        for(int i = 0; i < numbers.length - 2; i++){
            int j = i + 1, k = numbers.length - 1, tg = target - numbers[i];
            while(j < k){
                int tmp = numbers[j] + numbers[k], tdiff = Math.abs(tg - tmp);
                if(tdiff < diff){
                    diff = tdiff;
                    res = tmp + numbers[i];
                }
                if(tmp < tg) j++;
                else if(tmp > tg) k--;
                else return target;
            }
        }
        return res;
    }
}
