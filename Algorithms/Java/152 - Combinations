/*
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

Example
For example,
If n = 4 and k = 2, a solution is:
[[2,4],[3,4],[2,3],[1,2],[1,3],[1,4]]
*/

import java.util.ArrayList;
// vector or List should use ArrayList
// queue should use LinkedList
public class Solution {
    /**
     * @param n: Given the range of numbers
     * @param k: Given the numbers of combinations
     * @return: All the combinations of k numbers out of 1..n
     */
    private ArrayList<List<Integer>> list;
    public List<List<Integer>> combine(int n, int k) {
        list = new ArrayList<List<Integer>>();
        if(k == 0 || n < k) return list;
        buildList(1, n - k + 1, k, new ArrayList<Integer>());
        return list;
    }
    public void buildList(int lo, int hi, int k, ArrayList<Integer> lst){
        if(k-- == 0){
            list.add(lst);
            return;
        }
        while(lo <= hi){
            ArrayList<Integer> tmp = new ArrayList<Integer>(lst);
            tmp.add(lo++);
            buildList(lo, hi + 1, k, tmp);
        }
    }
}
