/*
Given a sorted array of n integers, find the starting and ending position of a given target value.
If the target is not found in the array, return [-1, -1].

Example
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].

Challenge
O(log n) time.
*/

public class Solution {
    /** 
     *@param A : an integer sorted array
     *@param target :  an integer to be inserted
     *return : a list of length 2, [index1, index2]
     */
    public int[] searchRange(int[] A, int target) {
        if(A == null) return new int[]{-1, -1};
        int idx = bSearch(A, 0, A.length - 1, target);
        if(idx < 0 || idx >= A.length || A[idx] != target)
            return new int[]{-1, -1};
        return new int[]{idx, bSearch(A, idx + 1, A.length - 1, target + 1) - 1};
    }
    public int bSearch(int[] v, int lo, int hi, int tg){
        if(lo > hi) return lo;
        int mid = (lo + hi) / 2;
        if(v[mid] < tg) return bSearch(v, mid + 1, hi, tg);
        return bSearch(v, lo, mid - 1, tg);
    }
}
