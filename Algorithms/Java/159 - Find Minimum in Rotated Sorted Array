/*
Suppose a sorted array is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
Find the minimum element.

Example
Given [4, 5, 6, 7, 0, 1, 2] return 0

Note
You may assume no duplicate exists in the array.
*/

public class Solution {
    /**
     * @param num: a rotated sorted array
     * @return: the minimum number in the array
     */
    public int findMin(int[] num) {
        if(num == null) return 0;
        if(num.length == 1) return num[0];
        return bSearch(num, 0, num.length - 1);
    }
    public int bSearch(int[] v, int lo, int hi){
        if(lo == hi) return v[lo];
        int mid = (lo + hi) / 2;
        if(v[mid] > v[hi]) return bSearch(v, mid + 1, hi);
        return bSearch(v, lo, mid);
    }
}
