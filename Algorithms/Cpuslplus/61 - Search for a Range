/*
Given a sorted array of n integers, find the starting and ending position of a given target value.
If the target is not found in the array, return [-1, -1].

Example
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].

Challenge
O(log n) time.
*/

#include <iostream>


class Solution {
    /** 
     *@param A : an integer sorted array
     *@param target :  an integer to be inserted
     *return : a list of length 2, [index1, index2]
     */
    int bSearch(vector<int> &v, int lo, int hi, int tg);
public:
    vector<int> searchRange(vector<int> &A, int target) {
        vector<int> v(2, -1);
        if(!A.size()) return v;
        int idx = bSearch(A, 0, A.size() - 1, target);
        if(idx < 0 || idx >= A.size() || A[idx] != target) return v;
        v[0] = idx;
        v[1] = bSearch(A, idx + 1, A.size() - 1, target + 1) - 1;
    }
};

int Solution::bSearch(vector<int> &v, int lo, int hi, int tg){
    if(lo > hi) return lo;
    int mid((lo + hi) / 2);
    if(v[mid] < tg) return bSearch(v, mid + 1, hi, tg);
    return bSearch(v, lo, mid - 1, tg);
}
