/*
Given a (decimal - e.g. 3.72) number that is passed in as a string, return the binary representation 
that is passed in as a string. If the fractional part of the number can not be represented accurately 
in binary with at most 32 characters, return ERROR.

Example
For n = "3.72", return "ERROR".
For n = "3.5", return "11.1".
*/

#include <iostream>
#include <string>
using namespace std;

class Solution {
    string getDecimal(double n);
    string getInteger(long n);
public:
    /**
     *@param n: Given a decimal number that is passed in as a string
     *@return: A string
     */
    string binaryRepresentation(string n) {
        string res;
        if(n == "") return res;
        double t = stod(n);
        long i = (long)t;
        double d = t - i;
        if(d > 0 && n[n.length() - 1] != '5') return "ERROR";
        res = getDecimal(d);
        if(res == "ERROR") return res;
        if(res != "") res = '.' + res;
        return getInteger(i) + res;
    }
};

string Solution::getDecimal(double n){
    string res;
    if(n == 0) return res;
    while(n){
        n *= 2;
        char dig = n >= 1 ? '1' : '0';
        res += dig;
        n -= dig - '0';
        if(res.length() > 32) return "ERROR";
    }
    return res;
}

string Solution::getInteger(long n){
    string res;
    if(n == 0) return "0";
    while(n){
        res = to_string(n & 1) + res;
        n >>= 1;
    }
    return res;
}
