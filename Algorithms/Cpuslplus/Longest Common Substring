/*
Given two strings, find the longest common substring.
Return the length of it.

Example
Given A = "ABCD", B = "CBCE", return 2.
Note
The characters in substring should occur continuously in original string. This is different with subsequence.

Challenge
O(n x m) time and memory.
*/

#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>
#include <unordered_set>
using namespace std;

class Solution {
public:    
    /**
     * @param A, B: Two string.
     * @return: the length of the longest common substring.
     */
    unordered_map<char, vector<int> > m;
    int longestCommonSubstring(string &A, string &B) {
        if(!A.size() || !B.size()) return 0;
        int res(0);
        for(int i = 0; i < A.length(); i++){
            char k = A[i];
            if(m.find(k) == m.end()) m[k] = vector<int>(1, i);//save index of new char
            else m[k].push_back(i); //save index of existing char
        }
        for(int i = 0; i < B.length(); i++){
            vector<int> v = m[B[i]];
            for(int j = 0; j < v.size(); j++){
                int tA = v[j], tB = i;
                for(; tA < A.length() && tB < B.length(); tA++, tB++)
                    if(A[tA] != B[tB]) break;
                res = max(res, tB - i);
            }
        }
        return res;
    }
};
