/*
Given a linked list, remove the nth node from the end of list and return its head.

Example
Given linked list: 1->2->3->4->5->null, and n = 2.

After removing the second node from the end, the linked list becomes 1->2->3->5->null.
Note
The minimum number of nodes in list is n.

Challenge
O(n) time
*/

#include <iostream>
using namespace std;

/**
 * Definition of ListNode
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *         this->val = val;
 *         this->next = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param head: The first node of linked list.
     * @param n: An integer.
     * @return: The head of linked list.
     */
    ListNode *removeNthFromEnd(ListNode *head, int n) {
        if(!head || !n) return head;
        ListNode nhead(0), *slow(&nhead), *fast(&nhead);
        nhead.next = head;
        while(slow->next && n--) slow = slow->next;
        if(n > 0) return head;
        while(slow->next){
            slow = slow->next;
            fast = fast->next;
        }
        slow = fast->next;
        fast->next = slow->next;
        delete slow;
        return nhead.next;
    }
};
