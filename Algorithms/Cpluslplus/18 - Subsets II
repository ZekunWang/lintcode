/*
Given a list of numbers that may has duplicate numbers, return all possible subsets

Example
If S = [1,2,2], a solution is:
[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]
Note
Each element in a subset must be in non-descending order.
The ordering between two subsets is free.
The solution set must not contain duplicate subsets.
Challenge
Can you do it in both recursively and iteratively?
*/

#include <vector>
using namespace std;

class Solution {
    vector<vector<int> > v;
public:
    /**
     * @param S: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    vector<vector<int> > subsetsWithDup(vector<int> &S) {
        v.push_back(vector<int>());
        if(!S.size()) return v;
        sort(S.begin(), S.end());
        v.push_back(vector<int>(1, S[0]));
        int pre(1), cur(v.size());
        for(int i = 1; i < S.size(); i++){
            int val(S[i]);
            if(val != S[i - 1]){
                for(int j = 0; j < pre; j++){
                    v.push_back(v[j]);
                    v.back().push_back(val);
                }
            }
            for(int j = pre; j < cur; j++){
                v.push_back(v[j]);
                v.back().push_back(val);
            }
            pre = cur;
            cur = v.size();
        }
        return v;
    }
};
