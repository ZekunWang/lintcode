/*
The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle.
Each solution contains a distinct board configuration of the n-queens' placement, 
where 'Q' and '.' both indicate a queen and an empty space respectively.

Example
There exist two distinct solutions to the 4-queens puzzle:
[
  // Solution 1
  [".Q..",
   "...Q",
   "Q...",
   "..Q."
  ],
  // Solution 2
  ["..Q.",
   "Q...",
   "...Q",
   ".Q.."
  ]
]
Challenge
Can you do it without recursion?
*/

#include <vector>
#include <string>
using namespace std;

class Solution {
    vector<vector<string> > v;
    vector<vector<char> > ch;
    void solution1(int row, int n);
    bool checkQ(int r, int c);
public:
    /**
     * Get all distinct N-Queen solutions
     * @param n: The number of queens
     * @return: All distinct solutions
     * For example, A string '...Q' shows a queen on forth position
     */
    vector<vector<string> > solveNQueens(int n) {
        if(n < 1) return v;
        vector<char> tmp;
        for(int i = 0; i < n; i++)
            tmp.push_back('.');
        for(int i = 0; i < n; i++) ch.push_back(tmp);
        solution1(0, n);
        return v;
    }
};

void Solution::solution1(int row, int n){
    if(row == n){
        vector<string> tmp;
        for(int i = 0; i < n; i++){
            string s;
            for(int j = 0; j < n; j++)
                s += ch[i][j];
            tmp.push_back(s);
        }
        v.push_back(tmp);
        return;
    }
    for(int i = 0; i < n; i++){
        ch[row][i] = 'Q';
        if(checkQ(row, i)) solution1(row + 1, n);
        ch[row][i] = '.';
    }
}

bool Solution::checkQ(int r, int c){
    for(int i = 0; i < r; i++){
        int j(0);
        while(ch[i][j] != 'Q') j++;
        if(j == c) return false;
        int diff(abs(c - j));
        if(diff == r - i) return false;
    }
    return true;
}
