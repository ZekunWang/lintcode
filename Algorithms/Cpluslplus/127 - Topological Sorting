/*
Given an directed graph, a topological order of the graph nodes is defined as follow:

For each directed edge A -> B in graph, A must before B in the order list.
The first node in the order can be any node in the graph with no nodes direct to it.
Find any topological order for the given graph.

Example
For graph as follow:
[0->1, 0->2, 0->3, 1->4, 2->4, 2->5, 3->4, 3->5]

The topological order can be:
[0, 1, 2, 3, 4, 5]
[0, 2, 3, 1, 5, 4]
...
Note
You can assume that there is at least one topological order in the graph.

Challenge
Can you do it in both BFS and DFS?
*/

/**
 * Definition for Directed graph.
 * struct DirectedGraphNode {
 *     int label;
 *     vector<DirectedGraphNode *> neighbors;
 *     DirectedGraphNode(int x) : label(x) {};
 * };
 */
#include <iostream>
#include <vector>
#include <stack>
#include <unordered_map>
#include <unordered_set>
using namespace std;
 
class Solution {
    vector<DirectedGraphNode*> v;
    stack<DirectedGraphNode*> res;
    unordered_map<DirectedGraphNode*, bool> m;
    unordered_set<DirectedGraphNode*> s;
    
    void solution1(vector<DirectedGraphNode*> graph);
    void DFS(DirectedGraphNode *cur);
    void solution2(vector<DirectedGraphNode*> graph);
public:
    /**
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */
    vector<DirectedGraphNode*> topSort(vector<DirectedGraphNode*> graph) {
        if(!graph.size()) return v;
        //solution1(graph);
        solution2(graph);
        return v;
    }
};

void Solution::solution1(vector<DirectedGraphNode*> graph){
    for(DirectedGraphNode *cur : graph){
        if(s.find(cur) == s.end()){
            s.insert(cur);
            DFS(cur);
        }
    }
    while(!res.empty()){
        v.push_back(res.top());
        res.pop();
    }
}

void Solution::DFS(DirectedGraphNode *cur){
    vector<DirectedGraphNode *> nb(cur->neighbors);
    for(DirectedGraphNode *tmp : nb){
        if(s.find(tmp) == s.end()){
            s.insert(tmp);
            DFS(tmp);
        }
    }
    res.push(cur);
}

void Solution::solution2(vector<DirectedGraphNode*> graph){
    stack<DirectedGraphNode*> st; // nodes in breadth order
    for(DirectedGraphNode *cur : graph){
        if(m.find(cur) == m.end()){ // not marked
            m[cur] = false; // mark as seen but not searched
            st.push(cur);
            while(!st.empty()){
                DirectedGraphNode *tmp(st.top());
                st.pop();
                if(!m[tmp]){
                    m[tmp] =true;
                    st.push(tmp);
                    for(DirectedGraphNode *i : tmp->neighbors){
                        if(m.find(i) == m.end()){
                            m[i] = false;
                            st.push(i);
                        }else if(!m[i]) st.push(i);
                    }
                }else if(s.find(tmp) == s.end()){
                    res.push(tmp); // seen and visited
                    s.insert(tmp); // made invalid
                }
            }
        }
    }
    while(!res.empty()){
        v.push_back(res.top());
        res.pop();
    }
}
