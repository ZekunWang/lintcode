/*
Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

Example
               2
1->2->3  =>   / \
             1   3
*/

/**
 * Definition of ListNode
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *         this->val = val;
 *         this->next = NULL;
 *     }
 * }
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

class Solution {
    TreeNode *solution1(vector<int> &v, int lo, int hi);
    TreeNode *solution2(unordered_map<int,int> &v, int lo, int hi);
public:
    /**
     * @param head: The first node of linked list.
     * @return: a tree node
     */
    TreeNode *sortedListToBST(ListNode *head) {
        if(!head) return NULL;
        vector<int> v;
        unordered_map<int,int> m;
        int cnt(0);
        ListNode *tmp(head);
        while(tmp){
            v.push_back(tmp->val);
            //m[cnt++] = tmp->val;
            tmp = tmp->next;
        }
        return solution1(v, 0, v.size() - 1);
        //return solution2(m, 0, m.size() - 1);
    }
};

TreeNode *Solution::solution1(vector<int> &v, int lo, int hi){
    if(lo > hi) return NULL;
    if(lo == hi) return new TreeNode(v[lo]);
    int mid((lo + hi) / 2);
    TreeNode *node = new TreeNode(v[mid]);
    node->left = solution1(v, lo, mid - 1);
    node->right = solution1(v, mid + 1, hi);
    return node;
}

TreeNode *Solution::solution2(unordered_map<int, int> &m, int lo, int hi){
    if(lo > hi) return NULL;
    if(lo == hi) return new TreeNode(m[lo]);
    int mid((lo + hi) / 2);
    TreeNode *node = new TreeNode(m[mid]);
    node->left = solution2(m, lo, mid - 1);
    node->right = solution2(m, mid + 1, hi);
    return node;
}
