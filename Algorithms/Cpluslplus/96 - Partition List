/*
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2->null and x = 3,
return 1->2->2->4->3->5->null.
*/

/**
 * Definition of ListNode
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *         this->val = val;
 *         this->next = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param head: The first node of linked list.
     * @param x: an integer
     * @return: a ListNode 
     */
    ListNode *partition(ListNode *head, int x) {
        if(!head || !head->next) return head;
        ListNode n1(0), n2(0), *pre(&n1), *cur(&n2);
        n2.next = head;
        while(cur->next){
            if(cur->next->val < x){
                ListNode *tmp(cur->next);
                cur->next = tmp->next;
                pre->next = tmp;
                pre = tmp;
            }else cur = cur->next;
        }
        pre->next = n2.next;
        return n1.next;
    }
};
