/*
Given a binary search tree and a new tree node, insert the node into the tree. 
You should keep the tree still be a valid binary search tree.

Example
Given binary search tree as follow, after Insert node 6, the tree should be:

  2             2
 / \           / \
1   4   -->   1   4
   /             / \ 
  3             3   6
Challenge
Can you do it without recursion?
*/

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
    TreeNode *solution1(TreeNode* root, TreeNode* node);
    TreeNode *solution2(TreeNode* root, TreeNode* node);
public:
    /**
     * @param root: The root of the binary search tree.
     * @param node: insert this node into the binary search tree
     * @return: The root of the new binary search tree.
     */
    TreeNode* insertNode(TreeNode* root, TreeNode* node) {
        if(!node) return root;
        //return solution1(root, node);
        return solution2(root, node);
    }
};

TreeNode *Solution::solution1(TreeNode* root, TreeNode* node){ //recursion
    if(!root) return node;
    if(node->val < root->val) root->left = solution1(root->left, node);
    else root->right = solution1(root->right, node);
    return root;
}

TreeNode *Solution::solution2(TreeNode* root, TreeNode* node){ //iteration
    if(!root) return node;
    TreeNode *cur = root;
    while(cur){
        if(node->val < cur->val){
            if(!cur->left){
                cur->left = node;
                break;
            }else cur = cur->left;
        }else{
            if(!cur->right){
                cur->right = node;
                break;
            }else cur = cur->right;
        }
    }
    return root;
}
