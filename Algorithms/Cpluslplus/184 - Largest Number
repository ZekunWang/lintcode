/*
Given a list of non negative integers, arrange them such that they form the largest number.

Example
Given [1, 20, 23, 4, 8], the largest formed number is 8423201.

Note
The result may be very large, so you need to return a string instead of an integer.

Challenge
Do it in O(nlogn) time complexity.
*/

#include <iostream>
#include <vector>
#include <string>
using namespace std;

class Solution {
    long shiftInt(long orig, long small, long large);
    int compInt(long a, long b);
    void sort(vector<int> &v, int lo, int hi, vector<int> &vt);
    void merge(vector<int> &v, int lo, int mid, int hi, vector<int> &vt);
public:
    /**
     *@param num: A list of non negative integers
     *@return: A string
     */
    string largestNumber(vector<int> &num) {
        if(!num.size()) return "";
        vector<int> vt(num);
        sort(num, 0, num.size() - 1, vt);
        string res;
        bool zero(true);
        for(int i : num){
            res += to_string(i);
            if(i) zero = false;
        }
        return zero ? "0" : res;
    }
};

void Solution::sort(vector<int> &v, int lo, int hi, vector<int> &vt){
    if(lo == hi) return;
    int mid((lo + hi) / 2);
    sort(v, lo, mid, vt);
    sort(v, mid + 1, hi, vt);
    merge(v, lo, mid, hi, vt);
}

void Solution::merge(vector<int> &v, int lo, int mid, int hi, vector<int> &vt){
    if(compInt(v[mid], v[mid + 1]) > -1) return;
    int idxT(hi), idxR(hi), idxL(mid);
    while(idxR > mid){
        int right = v[idxR];
        int left = idxL >= lo ? v[idxL] : right;
        if(compInt(left, right) == -1){
            vt[idxT--] = left;
            idxL--;
        }else{
            vt[idxT--] = right;
            idxR--;
        }
    }
    for(int i = idxT + 1; i <= hi; i++) v[i] = vt[i];
}

int Solution::compInt(long a, long b){
    if(a == b) return 0;
    long ta(a), tb(b);
    while(ta > 9 && tb > 9) ta /= 10, tb /= 10;
    if(ta > 9) b = shiftInt(b, tb, ta);
    else a = shiftInt(a, ta, tb);
    if(a > b) return 1;
    if(a < b) return -1;
    return 0;
}

long Solution::shiftInt(long orig, long small, long large){
    while(large > 9){
        orig = orig * 10 + small;
        large /= 10;
    }
    return orig;
}
