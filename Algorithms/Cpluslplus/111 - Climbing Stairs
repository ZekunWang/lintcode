/*
You are climbing a stair case. It takes n steps to reach to the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example
Given an example n=3 , 1+1+1=2+1=1+2=3
return 3
*/

#include <vector>
using namespace std;

class Solution {
    int solution1(int n);
    int solution2(int n);
public:
    /**
     * @param n: An integer
     * @return: An integer
     */
    int climbStairs(int n) {
        //return solution1(n);
        return solution2(n);
    }
};

int Solution::solution1(int n){
    if(n < 0) return 0;
    if(n < 2) return 1;
    vector<int> cnt(n + 1, 1);
    for(int i = 2; i <= n; i++)
        cnt[i] = cnt[i - 1] + cnt[i - 2];
    return cnt[n];
}

int Solution::solution2(int n){
    if(n < 0) return 0;
    if(n < 2) return 1;
    int pre = 1, cur = 1;
    for(int i = 2; i <= n; i++){
        cur += pre;
        pre = cur - pre;
    }
    return cur;
}
