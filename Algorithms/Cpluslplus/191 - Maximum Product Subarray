/*
Find the contiguous subarray within an array (containing at least one number) which has the largest product.

Example
For example, given the array [2,3,-2,4], the contiguous subarray [2,3] has the largest product = 6.
*/

#include <vector>
using namespace std;

class Solution {
    int solution1(vector<int> &nums);
    int solution2(vector<int> &nums);
public:
    /**
     * @param nums: a vector of integers
     * @return: an integer
     */
    int maxProduct(vector<int>& nums) {
        //return solution1(nums);
        return solution2(nums);
    }
};

int Solution::solution1(vector<int> &nums){
    int sz(nums.size());
    if(sz == 0) return INT_MIN;
    vector<vector<int> > m(2, vector<int>(sz, 0));
    m[0][0] = m[1][0] = nums[0];
    int prod(nums[0]);
    for(int i = 1; i < sz; i++){
        if(nums[i] >= 0){
            m[0][i] = max(1, m[0][i-1]) * nums[i];
            m[1][i] = min(1, m[1][i-1]) * nums[i];
        }else{
            m[0][i] = min(1, m[1][i-1]) * nums[i];
            m[1][i] = max(1, m[0][i-1]) * nums[i];
        }
        prod = max(prod, m[0][i]);
    }
    return prod;
}

int Solution::solution2(vector<int> &nums){
    int sz(nums.size());
    if(sz == 0) return INT_MIN;
    int prod(nums[0]), mn(nums[0]), mx(nums[0]), tmp(0);
    for(int i = 1; i < sz; i++){
        if(nums[i] >= 0){
            mx = max(1, mx) * nums[i];
            mn = min(1, mn) * nums[i];
        }else{
            tmp = mx;
            mx = min(1, mn) * nums[i];
            mn = max(1, tmp) * nums[i];
        }
        prod = max(prod, mx);
    }
    return prod;
}
