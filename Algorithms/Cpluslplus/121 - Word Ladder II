/*
iven two words (start and end), and a dictionary, find all shortest transformation sequence(s) from start to end, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the dictionary

n:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]
Return
  [
    ["hit","hot","dot","dog","cog"],
    ["hit","hot","lot","log","cog"]
  ]
Note
All words have the same length.
All words contain only lowercase alphabetic characters.
*/

#include <iostream>
#include <vector>
#include <queue>
#include <unordered_set>
#include <string>
using namespace std;

class Solution {
    vector<vector<string>> v;
    queue<vector<string>> q;
    unordered_set<string> chk;
    
    void solution1(string start, string end, unordered_set<string> &dict);
    int getDiff(string cur, string end);
    void filterEndString(string end, int sz);
public:
    /**
      * @param start, a string
      * @param end, a string
      * @param dict, a set of string
      * @return a list of lists of string
      */
    vector<vector<string>> findLadders(string start, string end, unordered_set<string> &dict) {
        solution1(start, end, dict);
        return v;
    }
};

void Solution::solution1(string start, string end, unordered_set<string> &dict){
    if(start == "" || end == "" || dict.size() == 0) return;
    q.push(vector<string>(1, start));
    dict.erase(start);
    dict.erase(end);
    while(!dict.empty()){
        for(int i = 0, cnt = q.size(); i < cnt; i++){
            vector<string> cv = q.front();
            string cur = cv.back();
            //    cout << "hellp"<<endl;
            if(getDiff(cur, end) == 1){
                filterEndString(end, cnt - i);
                return;
            }
            q.pop();
            for(int j = 0; j < cur.length(); j++){
                char orig = cur[j];
                for(int k = 0; k < 26; k++){
                    if(orig == 'a' + k) continue;
                    cur[j] = 'a' + k;
                    if(dict.find(cur) != dict.end()){
                        chk.insert(cur);
                        vector<string> tmp(cv);
                        tmp.push_back(cur);
                        q.push(tmp);
                    }
                }
                cur[j] = orig;
            }
        }
        for(string st : chk) dict.erase(st);
        chk.clear();
    }
}

int Solution::getDiff(string cur, string end){
    int cnt(0);
    for(int i = 0; i < cur.length(); i++)
        if(cur[i] != end[i]) cnt++;
    return cnt;
}

void Solution::filterEndString(string end, int sz){
    while(sz-- > 0){
        vector<string> vt = q.front();
        q.pop();
        if(getDiff(vt.back(), end) == 1){
            vt.push_back(end);
            v.push_back(vt);
        }
    }
}
