/*
Sort a linked list in O(n log n) time using constant space complexity.

Example
Given 1-3->2->null, sort it to 1->2->3->null.
*/

/**
 * Definition of ListNode
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *         this->val = val;
 *         this->next = NULL;
 *     }
 * }
 */
class Solution {
    ListNode *sort(ListNode *head, int lo, int hi);
    ListNode *merge(ListNode *left, ListNode *right);
public:
    /**
     * @param head: The first node of linked list.
     * @return: You should return the head of the sorted linked list,
                    using constant space complexity.
     */
    ListNode *sortList(ListNode *head) {
        if(!head || !head->next) return head;
        ListNode *tmp(head);
        int cnt(0);
        while(tmp->next){
            cnt++;
            tmp = tmp->next;
        }
        return sort(head, 0, cnt);
    }
};

ListNode *Solution::sort(ListNode *head, int lo, int hi){
    if(lo == hi) return head;
    int mid((lo + hi) / 2), cnt(mid);
    ListNode *midNode(head);
    while(cnt-- > lo) midNode = midNode->next;
    ListNode *right = sort(midNode->next, mid + 1, hi);
    midNode->next = NULL;
    ListNode *left = sort(head, lo, mid);
    return merge(left, right);
}

ListNode *Solution::merge(ListNode *left, ListNode *right){
    ListNode head(0), *tmp(&head);
    while(left && right){
        if(left->val >= right->val){
            tmp->next = right;
            right = right->next;
        }else{
            tmp->next = left;
            left = left->next;
        }
        tmp = tmp->next;
    }
    if(left) tmp->next = left;
    else if(right) tmp->next = right;
    return head.next;
}
