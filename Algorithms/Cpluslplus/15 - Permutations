/*
Given a list of numbers, return all possible permutations.

Example
For nums = [1,2,3], the permutations are:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
Challenge
Do it without recursion.
*/

#include <vector>
using namespace std;

class Solution {
    vector<vector<int> > v;
    void solution1(vector<int> &nums);
public:
    /**
     * @param nums: A list of integers.
     * @return: A list of permutations.
     */
    vector<vector<int> > permute(vector<int> nums) {
        if(!nums.size()) return v;
        solution1(nums);
        return v;
    }
};

void Solution::solution1(vector<int> &nums){
    v.push_back(vector<int>(1, nums[0]));
    for(int i = 1; i < nums.size(); i++){   //each num to be added
        int nm(nums[i]);
        for(int j = 0, sz = v.size(); j < sz; j++){ //add new num to each vecctor
            v[j].push_back(nm);
            for(int k = 0, p = v[j].size() - 1; k < p; k++){    //add new vector and swap
                v.push_back(v[j]);
                swap(v.back()[k], v.back()[p]);
            }
        }
    }
}
