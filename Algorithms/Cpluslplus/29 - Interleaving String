/*
Given three strings: s1, s2, s3, determine whether s3 is formed by the interleaving of s1 and s2.

Example
For s1 = "aabcc", s2 = "dbbca"

When s3 = "aadbbcbcac", return true.
When s3 = "aadbbbaccc", return false.
Challenge
O(n2) time or better
*/

#include <vector>
#include <string>
using namespace std;

class Solution {
    bool solution1(string s1, string s2, string s3);
    bool solution2(string s1, string s2, string s3);
    bool solution3(string s1, string s2, string s3);
public:
    /**
     * Determine whether s3 is formed by interleaving of s1 and s2.
     * @param s1, s2, s3: As description.
     * @return: true of false.
     */
    bool isInterleave(string s1, string s2, string s3) {
        return solution1(s1, s2, s3);
        //return solution2(s1, s2, s3);
        //return solution3(s1, s2, s3);
    }
};

bool Solution::solution1(string s1, string s2, string s3){  // DP 2-D array
    int row = s1.length(), col = s2.length(), sz3 = s3.length();
    if(row + col != sz3) return false;
    vector<vector<bool> > chk(row+1, vector<bool>(col+1, false));
    chk[0][0] = true;
    for(int j = 1; j <= col; j++){
        if(s3[j-1] == s2[j-1] && chk[0][j-1]) chk[0][j] = true;
    }
    for(int i = 1; i <= row; i++){
        if(s3[i-1] == s1[i-1] && chk[i-1][0]) chk[i][0] = true;
    }
    for(int i = 1; i <= row; i++){
        for(int j = 1; j <= col; j++){
            if((s3[i+j-1] == s2[j-1] && chk[i][j-1]) ||
                (s3[i+j-1] == s1[i-1] && chk[i-1][j]))
                chk[i][j] = true;
        }   
    }
    return chk[row][col];
}

bool Solution::solution2(string s1, string s2, string s3){  // DP 1-D array
    int row = s1.length(), col = s2.length(), sz3 = s3.length();
    if(row + col != sz3) return false;
    vector<bool> chk(col+1, false);
    chk[0] = true;
    for(int j = 1; j <= col; j++){
        if(s3[j-1] == s2[j-1] && chk[j-1]) chk[j] = true;
    }
    for(int i = 1; i <= row; i++){
        if(s3[i-1] == s1[i-1] && chk[0]) chk[0] = true;
        else chk[0] = false;
        for(int j = 1; j <= col; j++){
            if((s3[i+j-1] == s2[j-1] && chk[j-1]) ||
                (s3[i+j-1] == s1[i-1] && chk[j]))
                chk[j] = true;
            else chk[j] = false;
        }   
    }
    return chk[col];
}

bool Solution::solution3(string s1, string s2, string s3){  // recursion
    if(s1.length() == 0) return s2 == s3;
    if(s2.length() == 0) return s1 == s3;
    int l1 = 0, l2 = 0, l3 = 0;
    int sz1 = s1.length(), sz2 = s2.length(), sz3 = s3.length();
    while(l1 < sz1 && l2 < sz2 && l3 < sz3){
        if(s3[l3] == s1[l1] && s3[l3] == s2[l2]) 
            return solution2(s1.substr(l1), s2.substr(l2+1), s3.substr(l3+1))
                || solution2(s1.substr(l1+1), s2.substr(l2), s3.substr(l3+1));
        else if(s3[l3] == s1[l1]) l1++;
        else if(s3[l3] == s2[l2]) l2++;
        else return false;
        l3++;
    }
    while(l1 < sz1 && l3 < sz3){
        if(s1[l1++] != s3[l3++]) return false;
    }
    while(l2 < sz2 && l3 < sz3){
        if(s2[l2++] != s3[l3++]) return false;
    }
    return (l1 == sz1 && l2 == sz2 && l3 == sz3) ? true : false;
}
