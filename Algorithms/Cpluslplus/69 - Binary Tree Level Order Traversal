/*
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

Example
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
 
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

Challenge
Challenge 1: Using only 1 queue to implement it.
Challenge 2: Use DFS algorithm to do it.
*/

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */

#include <vector>
using namespace std;
 
class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: Level order a list of lists of integer
     */
    vector<vector<int> > v;
    void build(TreeNode *node, int lv);
public:
    vector<vector<int>> levelOrder(TreeNode *root) {
        if(!root) return v;
        build(root, 0);
        return v;
    }
};

void Solution::build(TreeNode *node, int lv){
    if(!node) return;
    if(v.size() <= lv) v.push_back(vector<int>());
    v[lv].push_back(node->val);
    build(node->left, lv + 1);
    build(node->right, lv + 1);
}
