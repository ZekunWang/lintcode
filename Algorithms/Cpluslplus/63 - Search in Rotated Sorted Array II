/*
Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?
Would this affect the run-time complexity? How and why?
Write a function to determine if a given target is in the array.
*/

#include <vector>
using namespace std;

class Solution {
    /** 
     * param A : an integer ratated sorted array and duplicates are allowed
     * param target :  an integer to be search
     * return : a boolean 
     */
public:
    bool search(vector<int> &A, int target) {
        int l(0), r(A.size() - 1), m(0);
        if(r < 0) return false;
        while(l < r - 1){
            m = l + (r - l) / 2;
            if(A[m] == target) return true;
            else if(A[m] < target){
                if(A[l] > A[m] && A[l] <= target) r = m;
                else l = m;
            }else{
                if(A[m] > A[r] && target <= A[r]) l = m;
                else r = m;
            }
        }
        return A[l] == target || A[r] == target ? true : false;
    }
};
