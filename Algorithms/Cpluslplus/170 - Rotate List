/*
Given a list, rotate the list to the right by k places, where k is non-negative.

Example
Given 1->2->3->4->5 and k = 2, return 4->5->1->2->3.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    /**
     * @param head: the list
     * @param k: rotate to the right k places
     * @return: the list after rotation
     */
    ListNode *rotateRight(ListNode *head, int k) {
        if(!head || !head->next || !k) return head;
        int cnt(1);
        ListNode *cur(head), *nxt(head);
        while(cur->next){
            cnt++;
            cur = cur->next;
        }
        k = k % cnt;
        if(!k) return head;
        k = cnt - k;
        while(--k) nxt = nxt->next;
        cur->next = head;
        head = nxt->next;
        nxt->next = NULL;
        return head;
    }
};
