/*
Given a root of Binary Search Tree with unique value for each node. Remove the node with given value. 
If there is no such a node with given value in the binary search tree, do nothing. You should keep the 
tree still a binary search tree after removal.

Example
Given binary search tree:
    5
   / \
  3   6
 / \
2   4
Remove 3, you can either return:
    5
   / \
  2   6
   \
    4
or
    5
   / \
  4   6
 /
2
*/

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root: The root of the binary search tree.
     * @param value: Remove the node with given value.
     * @return: The root of the binary search tree after removal.
     */
    TreeNode* removeNode(TreeNode* root, int value) {
        if(!root) return NULL;
        int val(root->val);
        if(val == value){
            TreeNode *left(root->left), *right(root->right);
            if(!left && !right){
                delete root;
                return NULL;
            }else if(!left){
                while(right->left) right = right->left;
                root->val = right->val;
                root->right = removeNode(root->right, root->val);
            }else{
                while(left->right) left = left->right;
                root->val = left->val;
                root->left = removeNode(root->left, root->val);
            }
        }else if(value < val) root->left = removeNode(root->left, value);
        else root->right = removeNode(root->right, value);
        return root;
    }
};
