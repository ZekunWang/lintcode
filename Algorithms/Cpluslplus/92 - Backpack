/*
Given n items with size Ai, an integer m denotes the size of a backpack. How full you can fill this backpack?

Example
If we have 4 items with size [2, 3, 5, 7], the backpack size is 11, we can select [2, 3, 5], so that the max 
size we can fill this backpack is 10. If the backpack size is 12. we can select [2, 3, 7] so that we can fulfill the backpack.

You function should return the max size we can fill in the given backpack.

Note
You can not divide any item into small pieces.

Challenge
O(n x m) time and O(m) memory.
O(n x m) memory is also acceptable if you do not know how to optimize memory.
*/

#include <vector>
using namespace std;

class Solution {
    int solution1(int m, vector<int> &A);
    int solution2(int m, vector<int> &A);
public:
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param A: Given n items with size A[i]
     * @return: The maximum size
     */
    int backPack(int m, vector<int> A) {
        //return solution1(m, A);
        return solution2(m, A);
    }
};

int Solution::solution1(int m, vector<int> &A){
    int sz = A.size();
    if(m < 1 || sz == 0) return 0;
    vector<vector<bool> > chk(sz+1, vector<bool>(m+1, false));
    chk[0][0] = true;
    for(int i = 0; i < sz; i++){
        for(int j = 0; j <= m; j++){
            chk[i+1][j] = chk[i][j];
            if(j >= A[i] && chk[i][j-A[i]]) chk[i+1][j] = true;
        }
    }
    for(int j = m; j > 0; j--){
        if(chk[sz][j]) return j;
    }
    return 0;
}

int Solution::solution2(int m, vector<int> &A){
    int sz = A.size();
    if(m < 1 || sz == 0) return 0;
    vector<bool> chk(m+1, false);
    chk[0] = true;
    for(int i = 0; i < sz; i++){
        for(int j = m; j > 0; j--){
            if(chk[j]) continue;
            if(j >= A[i] && chk[j-A[i]]) chk[j] = true;
        }
    }
    for(int j = m; j > 0; j--){
        if(chk[j]) return j;
    }
    return 0;
}
