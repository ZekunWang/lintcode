/*
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

Example
Given the following triangle:
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.
*/

#include <vector>
using namespace std;

class Solution {
    int solution1(vector<vector<int> > &tri);
    int solution2(vector<vector<int> > &tri);
public:
    /**
     * @param triangle: a list of lists of integers.
     * @return: An integer, minimum path sum.
     */
    int minimumTotal(vector<vector<int> > &triangle) {
        //return solution1(triangle);
        return solution2(triangle);
    }
};

int Solution::solution1(vector<vector<int> > &tri){
    int row = tri.size(), sum = INT_MAX;
    if(row == 0) return 0;
    vector<vector<int> > cnt(tri);
    for(int i = 1; i < row; i++){
        cnt[i][0] += cnt[i - 1][0];
        int j = 0, sz = cnt[i].size();
        while(++j < sz - 1){
            cnt[i][j] += min(cnt[i-1][j], cnt[i-1][j-1]);
        }
        cnt[i][j] += cnt[i - 1][j - 1];
    }
    for(int j = 0; j < cnt[row - 1].size(); j++){
        sum = min(sum, cnt[row - 1][j]);
    }
    return sum;
}

int Solution::solution2(vector<vector<int> > &tri){
    int row = tri.size(), sum = INT_MAX;
    if(row == 0) return 0;
    vector<int> cnt(tri.back().size(), 0);
    cnt[0] = tri[0][0];
    for(int i = 1; i < row; i++){
        int sz = tri[i].size(), j = sz - 1;
        cnt[j] = tri[i][j] + cnt[j - 1];
        while(--j > 0){
            cnt[j] = tri[i][j] + min(cnt[j], cnt[j-1]);
        }
        cnt[0] += tri[i][0];
    }
    for(int j = 0; j < cnt.size(); j++){
        sum = min(sum, cnt[j]);
    }
    return sum;
}
