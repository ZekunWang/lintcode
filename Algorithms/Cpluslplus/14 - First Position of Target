/*
For a given sorted array (ascending order) and a target number, find the first index of this number in O(log n) time complexity.

If the target number does not exist in the array, return -1.

Example
If the array is [1, 2, 3, 3, 4, 5, 10], for given target 3, return 2.

Challenge
If the count of numbers is bigger than 2^32, can your code work properly?
*/

#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    /**
     * @param nums: The integer array.
     * @param target: Target number to find.
     * @return: The first position of target. Position starts from 0. 
     */
    int bSearch(vector<int> &v, int lo, int hi, int tg);
    int binarySearch(vector<int> &array, int target) {
        if(!array.size()) return -1;
        return bSearch(array, 0, array.size() - 1, target);
    }
};

int Solution::bSearch(vector<int> &v, int lo, int hi, int tg){
    if(lo > hi) return (lo < 0 || lo >= v.size() || v[lo] != tg) ? -1 : lo;
    int mid((lo + hi) / 2);
    if(v[mid] < tg) return bSearch(v, mid + 1, hi, tg);
    return bSearch(v, lo, mid - 1, tg);
}
