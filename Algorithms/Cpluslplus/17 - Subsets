/*
Given a set of distinct integers, return all possible subsets.

Example
If S = [1,2,3], a solution is:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
Note
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
Challenge
Can you do it in both recursively and iteratively?
*/

#include <vector>
using namespace std;

class Solution {
    vector<vector<int> > v;
public:
    /**
     * @param S: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    vector<vector<int> > subsets(vector<int> &nums) {
        v.push_back(vector<int>());
        if(!nums.size()) return v;
        sort(nums.begin(), nums.end());
        for(int cur : nums){
            for(int i = 0, sz = v.size(); i < sz; i++){
                v.push_back(v[i]);
                v.back().push_back(cur);
            }
        }
        return v;
    }
};
